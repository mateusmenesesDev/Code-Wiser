model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  type     TaskTypeEnum?     @default(USER_STORY)
  tags     String[]
  priority TaskPriorityEnum?
  status   TaskStatusEnum?   @default(BACKLOG)

  dueDate DateTime?

  blocked       Boolean? @default(false)
  blockedReason String?

  storyPoints Int?

  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])

  projectId         String?
  project           Project? @relation(fields: [projectId], references: [id])
  projectTemplateId String?

  projectTemplate ProjectTemplate? @relation(fields: [projectTemplateId], references: [id])
  epicId          String?
  epic            Epic?            @relation(fields: [epicId], references: [id])
  sprintId        String?
  sprint          Sprint?          @relation(fields: [sprintId], references: [id])
}

model Epic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  status    EpicStatusEnum?
  progress  Int?
  startDate DateTime?
  endDate   DateTime?

  projectId         String?
  project           Project?         @relation(fields: [projectId], references: [id])
  projectTemplateId String?
  projectTemplate   ProjectTemplate? @relation(fields: [projectTemplateId], references: [id])

  tasks Task[]
}

model Sprint {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?

  projectTemplateSlug String?
  projectTemplate     ProjectTemplate? @relation(fields: [projectTemplateSlug], references: [slug])

  projectSlug String?
  project     Project? @relation(fields: [projectSlug], references: [slug])

  startDate DateTime?
  endDate   DateTime?

  tasks Task[]
}
